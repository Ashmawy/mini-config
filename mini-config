#!/usr/bin/python

import subprocess
import os
import sys
import yaml
from shutil import copyfile


CONFIG_DIR = './config'
PACKAGES_DIR = './packages'


def update_packages():
	# Check for package updates before doing anything 
	print 'Updating packages..'
	subprocess.check_output('sudo DEBIAN_FRONTEND=noninteractive apt-get update', shell=True)


def install_packages(install_file):
	# Install packages listed under install.txt
	print 'Installing packages listed under {}'.format(install_file)
	if file_is_empty(install_file):
		print 'No packages found to install.'
		return

	packages = open(install_file).readlines()

	for package in packages:
		print 'Installing {}'.format(package)
		try:
			subprocess.check_output('sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --force-yes {}'.format(package), shell=True)
		except Exception as e:
			sys.exit('Failed to install {}: {}'.format(package, e))

		print '{} installed successfuly'.format(package)


def uninstall_packages(uninstall_file):
	print 'Uninstalling packages listed under {}'.format(uninstall_file)

	#Lets make sure the file isn't empty before wasting time here
	if file_is_empty(uninstall_file):
		print 'No packages found to uninstall.'
		return

	packages = open(uninstall_file).readlines()

	for package in packages:
		print 'Removing {}'.format(package)
		try: 
			subprocess.call('sudo DEBIAN_FRONTEND=noninteractive apt-get remove -y {} && sudo DEBIAN_FRONTEND=noninteractive apt-get autoremove -y && sudo DEBIAN_FRONTEND=noninteractive apt-get clean'.format(package), shell=True)
		except Exception as e:
			sys.exit('Failed to uninstall {}: {}'.format(package, e))

		print '{} removed successfuly'.format(package)


def copy_file_content(file_name, destination, permissions, group, user):
	print 'Copying {} to {} with permissions {}'.format(file_name, destination, permissions)
	try:
		# copy the file, change its permissions and owners after
		copyfile(file_name, destination)
		subprocess.call(['chmod', str(permissions), destination])
		subprocess.call(['chown', '{}:{}'.format(user,group), destination])
	except Exception as e:
		raise

	print '{} was successfully copied to {}'.format(file_name,destination)


def set_config(config_yaml):
	with open(config_yaml, 'r') as stream:
	    try:
	        config = yaml.safe_load(stream)
	    except yaml.YAMLError as e:
	        sys.exit('Failed to load {}, this might be a malformed yaml file: {}'.format(config_yaml, e))


	for k,v in config.iteritems():
		if k != 'file':
			print 'mini-config is unable to handle config of type {}. Skipping.'.format(k)
			continue

		copy_file_content(v['name'], v['destination'], v['permissions'], v['group'], v['user'])

def empty_apache_directory():
	# In case index.html hasn't been removed or anything funky happens, lets simply clear the whole directory from all files
	try:
		subprocess.check_output('rm -rf /var/www/html/*', shell=True)
	except Exception as e:
		sys.exit('Unable to empty /var/www/html. Exiting.')
	

def needrestart():
	print 'Checking what needs restarting..'
	subprocess.call(['needrestart'])


def file_is_empty(file):
	return os.stat(file).st_size == 0


def main():
	
	update_packages()
	uninstall_packages('{}/uninstall.txt'.format(PACKAGES_DIR))
	install_packages('{}/install.txt'.format(PACKAGES_DIR))
	empty_apache_directory()


	for config in [f for f in os.listdir(CONFIG_DIR) if os.path.isfile(os.path.join(CONFIG_DIR, f))]:
		set_config('{}/{}'.format(CONFIG_DIR, config))


	needrestart()
	print 'All done!'


if __name__ == '__main__':
	main()